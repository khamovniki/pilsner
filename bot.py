import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, Updater

from api import Api

SUB_PREFIX = 'sub'
UNSUB_PREFIX = 'unsub'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

api = Api('http://localhost:8080/api')

REQUEST_KWARGS = {
    'proxy_url': 'socks5://178.62.60.220:1080',
    'urllib3_proxy_kwargs': {
        'username': 'proxy',
        'password': 'proxypassword',
    }
}


def extract_chat_id(update):
    try:
        return update.message.chat_id
    except:
        return update.callback_query.message.chat_id


def start(bot, update):
    text = '''
<b>–ü—Ä–∏–≤–µ—Ç!</b>
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã.
–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –∏ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
/tags ‚Äì –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã
/unsub ‚Äì –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–∫–æ–π-–ª–∏–±–æ —Ç–µ–º—ã
'''
    chat_id = update.message.chat_id
    api.create_user(chat_id)
    reply_markup = get_suggest_to_subscribe_button()
    bot.send_message(chat_id=chat_id,
                     text=text,
                     parse_mode='HTML',
                     reply_markup=reply_markup)


def wrap_tags(tag_list, callback_prefix):
    def callback(tag):
        return f'{callback_prefix}%{tag}'
    return InlineKeyboardMarkup([[InlineKeyboardButton(tag, callback_data=callback(tag))] for tag in tag_list])


def tags(bot, update):
    chat_id = extract_chat_id(update)
    tag_list = api.get_absent_user_tags(chat_id)
    reply_markup = wrap_tags(tag_list, SUB_PREFIX)
    bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã", reply_markup=reply_markup)


def suggest_new_tags(bot, update, tag_list, subscribed_tag):
    chat_id = update.callback_query.message.chat_id
    message_id = update.callback_query.message.message_id
    reply_markup = wrap_tags(tag_list, SUB_PREFIX)
    text = f'''
–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ¬´{subscribed_tag}¬ª
–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ç–µ–º—ã (–ª–∏–±–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, \
–º—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç–µ–º—ã –∏ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –Ω–∏–º
'''
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message_id,
                          text=text,
                          reply_markup=reply_markup)


def send_no_available_tags_message(bot, update):
    chat_id = update.callback_query.message.chat_id
    message_id = update.callback_query.message.message_id
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message_id,
                          text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ —Ç–µ–≥–∏. –ê –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å')


def edit_tags_message(bot, update, subscribed_tag):
    tag_list = api.get_absent_user_tags(update.callback_query.message.chat_id)
    if tag_list:
        suggest_new_tags(bot, update, tag_list, subscribed_tag)
    else:
        send_no_available_tags_message(bot, update)


def tags_callback(bot, update):
    tag = update.callback_query.data.split('%')[1]
    api.add_user_tag(update.callback_query.message.chat_id, tag)
    edit_tags_message(bot, update, tag)


def send_user_has_no_tags_message(bot, update):
    reply_markup = InlineKeyboardMarkup([[get_suggest_to_subscribe_button()]])
    bot.send_message(chat_id=extract_chat_id(update),
                     text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É üò•',
                     reply_markup=reply_markup)


def get_suggest_to_subscribe_button():
    return InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã', callback_data=f'subscribe')


def unsub(bot, update):
    chat_id = extract_chat_id(update)
    user_tags = api.get_user_tags(chat_id)
    if not user_tags:
        send_user_has_no_tags_message(bot, update)
        return
    reply_markup = wrap_tags(user_tags, UNSUB_PREFIX)
    bot.send_message(chat_id=chat_id,
                     text='–û—Ç –∫–∞–∫–æ–π —Ç–µ–º—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?',
                     reply_markup=reply_markup)


def get_sub_unsub_markup():
    subscribe_button = get_suggest_to_subscribe_button()
    unsubscribe_button = InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe')
    return InlineKeyboardMarkup([[subscribe_button], [unsubscribe_button]])


def unsub_callback(bot, update):
    tag = update.callback_query.data.split('%')[1]
    api.delete_user_tag(update.callback_query.message.chat_id, tag)
    chat_id = update.callback_query.message.chat_id
    message_id = update.callback_query.message.message_id
    reply_markup = get_sub_unsub_markup()
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message_id,
                          text=f'–í—ã –æ–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã ¬´{tag}¬ª',
                          reply_markup=reply_markup)


def start_bot(token):
    updater = Updater(token=token, request_kwargs=REQUEST_KWARGS)
    dispatcher = updater.dispatcher
    start_handler = CommandHandler('start', start)
    dispatcher.add_handler(start_handler)
    tags_handler = CommandHandler('tags', tags)
    dispatcher.add_handler(tags_handler)
    tags_callback_handler = CallbackQueryHandler(tags_callback, pattern=f'{SUB_PREFIX}%.*')
    dispatcher.add_handler(tags_callback_handler)
    unsub_handler = CommandHandler('unsub', unsub)
    dispatcher.add_handler(unsub_handler)
    unsub_callback_handler = CallbackQueryHandler(unsub_callback, pattern=f'{UNSUB_PREFIX}%.*')
    dispatcher.add_handler(unsub_callback_handler)
    subscribe_callback_handler = CallbackQueryHandler(tags, pattern='subscribe')
    dispatcher.add_handler(subscribe_callback_handler)
    unsubscribe_callback_handler = CallbackQueryHandler(unsub, pattern='unsubscribe')
    dispatcher.add_handler(unsubscribe_callback_handler)
    updater.start_polling()
    return updater.bot
